FROM --platform=${BUILDPLATFORM} node:18-bookworm AS common-base

WORKDIR /misskey

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	apt-get update
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	apt-get install -y --no-install-recommends build-essential 


FROM --platform=${BUILDPLATFORM} common-base AS common

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/backend/package.json ./packages/backend/
COPY packages/client/package.json ./packages/client/
COPY packages/sw/package.json ./packages/sw/
COPY packages/misskey-js/package.json ./packages/misskey-js/

RUN corepack enable
RUN --mount=type=cache,target=/root/.local/share/pnpm pnpm install --frozen-lockfile


FROM --platform=${BUILDPLATFORM} common-base as cross-build-common

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	apt-get install -y --no-install-recommends g++-aarch64-linux-gnu jq


FROM --platform=${BUILDPLATFORM} cross-build-common AS re2

ENV npm_config_arch=arm64 \
	CC="aarch64-linux-gnu-gcc" \
	CXX="aarch64-linux-gnu-g++" \
	AR="aarch64-linux-gnu-ar" \
	RANLIB="aarch64-linux-gnu-ranlib" \
	LINK="aarch64-linux-gnu-g++" \
	CPP="aarch64-linux-gnu-gcc -E" \
	STRIP="aarch64-linux-gnu-strip" \
	OBJCOPY="aarch64-linux-gnu-objcopy" \
	LD="aarch64-linux-gnu-g++" \
	OBJDUMP="aarch64-linux-gnu-objdump" \
	NM="aarch64-linux-gnu-nm" \
	AS="aarch64-linux-gnu-as"

WORKDIR /re2

COPY packages/backend/package.json ../backend.json

RUN git clone -b $(cat ../backend.json | jq -r .dependencies.re2) https://github.com/uhop/node-re2.git .
RUN git submodule update --init
RUN npm i --ignore-scripts
RUN npx node-gyp rebuild --arch=arm64


FROM --platform=${BUILDPLATFORM} cross-build-common AS tfjs

WORKDIR /tfjs-node

RUN curl -OL https://storage.googleapis.com/tf-builds/libtensorflow_r2_7_linux_arm64.tar.gz
RUN tar xzvf libtensorflow_r2_7_linux_arm64.tar.gz


FROM --platform=${BUILDPLATFORM} common AS builder

COPY gulpfile.js ./gulpfile.js
COPY locales ./locales
COPY scripts ./scripts
COPY packages/backend ./packages/backend
COPY packages/client ./packages/client
COPY packages/sw ./packages/sw
COPY packages/misskey-js ./packages/misskey-js

ENV NODE_ENV=production

RUN --mount=type=cache,target=/root/.local/share/pnpm pnpm build


FROM --platform=${BUILDPLATFORM} common AS modules

RUN find ./ -name "node_modules" | xargs rm -rf
RUN --mount=type=cache,target=/root/.local/share/pnpm pnpm install --frozen-lockfile --prod --no-optional

COPY --from=re2 /re2/build/Release/re2.node /misskey/packages/backend/node_modules/re2/build/Release/re2.node
COPY --from=tfjs /tfjs-node/lib /misskey/packages/backend/node_modules/@tensorflow/tfjs-node/deps/lib
COPY --from=tfjs /tfjs-node/include /misskey/packages/backend/node_modules/@tensorflow/tfjs-node/deps/include


FROM --platform=${BUILDPLATFORM} node:18-bookworm AS submodule

WORKDIR /misskey

COPY .git .git

RUN git submodule update --init


FROM --platform=${BUILDPLATFORM} alpine/curl AS ffmpeg

RUN apk --update add tar xz
RUN curl -L https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-arm64-static.tar.xz -o ffmpeg.tar.xz
RUN tar Jxvf ffmpeg.tar.xz --wildcards ffmpeg-*/ffmpeg -C /ffmpeg --strip-components 1


FROM --platform=${BUILDPLATFORM} alpine/curl AS tini

RUN curl -L https://github.com/krallin/tini/releases/latest/download/tini-static-arm64 -o tini
RUN chmod +x /tini


FROM --platform=${TARGETPLATFORM} node:18-bookworm-slim AS runner

WORKDIR /misskey

RUN corepack enable

COPY .node-version .node-version
COPY package.json ./
COPY packages/backend/ormconfig.js ./packages/backend/
COPY packages/backend/migration ./packages/backend/migration
COPY packages/backend/nsfw-model ./packages/backend/nsfw-model
COPY packages/backend/assets ./packages/backend/assets
COPY packages/backend/package.json ./packages/backend/
COPY packages/client/package.json ./packages/client/
COPY packages/client/assets ./packages/client/assets
COPY packages/sw/package.json ./packages/sw/
COPY packages/misskey-js/package.json ./packages/misskey-js/
COPY locales locales
COPY scripts scripts
COPY assets assets
COPY --from=submodule /misskey/misskey-assets ./misskey-assets
COPY --from=tini /tini /tini
COPY --from=ffmpeg /ffmpeg /usr/bin/ffmpeg
COPY --from=modules /misskey/node_modules ./node_modules
COPY --from=modules /misskey/packages/backend/node_modules ./packages/backend/node_modules
COPY --from=modules /misskey/packages/client/node_modules ./packages/client/node_modules
COPY --from=modules /misskey/packages/misskey-js/node_modules ./packages/misskey-js/node_modules
COPY --from=builder /misskey/built ./built
COPY --from=builder /misskey/packages/backend/built ./packages/backend/built
COPY --from=builder /misskey/packages/misskey-js/built ./packages/misskey-js/built

ENV NODE_ENV=production
ENTRYPOINT ["/tini", "--"]
CMD ["pnpm", "run", "migrateandstart"]
